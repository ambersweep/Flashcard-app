{"version":3,"sources":["Layout/Header.js","Layout/Components/CreateDeckButton.js","utils/api/index.js","Layout/Components/DeckCard.js","Layout/Home.js","Layout/Components/Nav.js","Layout/Study.js","Layout/EditDeck.js","Layout/Deck.js","Layout/CreateDeck.js","Layout/Components/CardForm.js","Layout/EditCard.js","Layout/AddCard.js","Layout/NotFound.js","Layout/index.js","App.js","index.js"],"names":["Header","className","CreateDeckButton","to","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","DeckCard","description","totalCards","updateDecks","history","useHistory","handleDelete","window","confirm","go","type","onClick","Home","deckList","decks","map","length","Nav","page","href","Study","useState","setCards","cardFront","setCardFront","deckTitle","setDeckTitle","currIndex","setCurrIndex","useParams","currentCard","find","index","useEffect","ac","AbortController","fetchDeck","abort","front","back","log","class","push","append","EditDeck","editDeck","abortController","deckInfo","changeForm","target","value","submitForm","event","preventDefault","onSubmit","onChange","placeholder","rows","role","Deck","setDeck","useRouteMatch","deleteHandler","style","color","CreateDeck","newDeck","setNewDeck","CardForm","cardBack","firstBtnText","EditCard","editCard","cardInfo","AddCard","addCard","createCard","NotFound","Layout","setDecks","deckLength","setDeckLength","newDecks","fetchDecks","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.820eadaa.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\"><i className=\"bi bi-card-text\"></i> Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CreateDeckButton() {\r\n  return (\r\n    <div>\r\n      <Link className=\"btn btn-secondary mb-2 ml-3\" to=\"/decks/new\">\r\n      <i className=\"bi bi-plus-circle mr-2\"></i>\r\n        Create Deck\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../../utils/api\";\r\n\r\nexport default function DeckCard({\r\n  id,\r\n  description,\r\n  name,\r\n  totalCards,\r\n  updateDecks,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  const handleDelete = async () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this deck? You will not be able to recover it.\"\r\n      )\r\n    ) {\r\n      await deleteDeck(id);\r\n      updateDecks(-1);\r\n    } else {\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"col-sm-9\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <h5 className=\"card-title col-sm-10 text-truncate\">{name}</h5>\r\n              <p className=\"text-muted ml-3\">{totalCards} cards</p>\r\n            </div>\r\n            <p className=\"card-text\">{description}</p>\r\n            <div>\r\n              <div className=\"row\"></div>\r\n              <Link className=\"btn btn-secondary mr-2\" to={`/decks/${id}`}>\r\n                <i className=\"bi bi-eye-fill mr-2\"></i>\r\n                View\r\n              </Link>\r\n              <Link className=\"btn btn-primary mr-2\" to={`/decks/${id}/study`}>\r\n                <i className=\"bi bi-journal-bookmark-fill mr-2\"></i>\r\n                Study\r\n              </Link>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={handleDelete}\r\n              >\r\n                <i className=\"bi bi-trash-fill\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CreateDeckButton from \"./Components/CreateDeckButton\";\r\nimport DeckCard from \"./Components/DeckCard\";\r\nexport default function Home({ decks }) {\r\n  const deckList = decks.map(({ id, name, description, cards }) => (\r\n    <DeckCard\r\n      id={id}\r\n      key={id}\r\n      name={name}\r\n      description={description}\r\n      totalCards={cards.length}\r\n    />\r\n  ));\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <CreateDeckButton />\r\n        {deckList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Nav({ name, page }) {\r\n  return (\r\n    <div className=\"flex-container\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">\r\n              <i className=\"bi bi-house-door-fill\"></i> Home\r\n            </a>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">{name}</a>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            {page}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Nav from \"./Components/Nav\";\r\nimport { readDeck } from \"../utils/api/index.js\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\n\r\nexport default function Study() {\r\n  const history = useHistory();\r\n  const [cards, setCards] = useState([]);\r\n  const [cardFront, setCardFront] = useState(true);\r\n  const [deckTitle, setDeckTitle] = useState(\"\");\r\n  const [currIndex, setCurrIndex] = useState(0);\r\n  const { deckId } = useParams();\r\n\r\n  const currentCard = cards.find((card, index) => index === currIndex);\r\n\r\n  const handleNext = () => {\r\n    if (currIndex === cards.length - 1) {\r\n      window.confirm(\r\n        \"Restart cards? Click 'cancel' to return to the home page.\"\r\n      )\r\n        ? setCurrIndex(() => 0)\r\n        : history.push(\"/\");\r\n    } else {\r\n      setCurrIndex((currIndex) => currIndex + 1);\r\n    }\r\n  };\r\n\r\n  // If cardFront is True, displays front of card, if False, displays back of card\r\n  const handleFlip = () => {\r\n    setCardFront(() => !cardFront);\r\n    console.log(cardFront);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const ac = new AbortController();\r\n    async function fetchDeck() {\r\n      try {\r\n        const response = await readDeck(deckId, ac.signal);\r\n        setCards(response.cards);\r\n        setDeckTitle(response.name);\r\n      } catch (err) {\r\n        if (err.type === \"AbortError\") {\r\n          console.error(\"Aborted\", err);\r\n        }\r\n      }\r\n    }\r\n\r\n    fetchDeck();\r\n    return () => ac.abort();\r\n  }, [deckId]);\r\n\r\n  if (cards.length > 2) {\r\n    return (\r\n      <div>\r\n        <Nav name={deckTitle} page=\"Study\" />\r\n        <h1>Study: {deckTitle}</h1>\r\n        <div className=\"row p-3\">\r\n          <div className=\"card w-100\">\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                Card {currIndex + 1} of {cards.length}\r\n              </h5>\r\n\r\n              <p className=\"card-text\">\r\n                {cardFront ? currentCard.front : currentCard.back}\r\n              </p>\r\n\r\n              {/* flip card button */}\r\n              <button onClick={handleFlip} className=\"btn btn-secondary mr-3\">\r\n                <i class=\"bi bi-arrow-clockwise mr-2\"></i>\r\n                Flip\r\n              </button>\r\n\r\n              {/* if card is on back side, provide a button to go to next card */}\r\n              {cardFront ? null : (\r\n                <button onClick={handleNext} className=\"btn btn-primary\">\r\n                  <i class=\"bi bi-arrow-right mr-2\"></i>\r\n                  Next\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (cards.length <= 2) {\r\n    return (\r\n      <div className=\"flex-container\">\r\n        <Nav name={deckTitle} page=\"Study\" />\r\n        <h1>Study: {deckTitle}</h1>\r\n        <div>\r\n          <h3>Not enough cards.</h3>\r\n          <p className=\"card-text\">\r\n            You need at least 3 cards to study. There are {cards.length} cards\r\n            in this deck.\r\n          </p>\r\n\r\n          <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\r\n            <i className=\"bi bi-plus-circle mr-2\"></i>\r\n            Add Cards\r\n          </Link>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return \"Loading...\";\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../utils/api/index.js\";\r\nimport Nav from \"./Components/Nav.js\";\r\n\r\nfunction EditDeck({ updateDecks }) {\r\n  // deck is originally an object with empty strings for name and description\r\n  const [deck, editDeck] = useState({ name: \"\", description: \"\" });\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const deckInfo = async () => {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      editDeck(() => response);\r\n    };\r\n\r\n    deckInfo();\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const changeForm = ({ target }) => {\r\n    editDeck({ ...deck, [target.name]: target.value });\r\n  };\r\n\r\n  const submitForm = async (event) => {\r\n    event.preventDefault();\r\n    const response = await updateDeck(deck);\r\n    history.push(`/decks/${response.id}`);\r\n    updateDecks(1);\r\n  };\r\n\r\n  if (!deck) {\r\n    return (\r\n      <div className=\"spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"flex-container\">\r\n        {/* navigation bar */}\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"/\">\r\n                <i className=\"bi bi-house-door-fill mr-1\"></i>\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item\">Edit Deck</li>\r\n          </ol>\r\n        </nav>\r\n\r\n        <div>\r\n          <h1>Edit Deck</h1>\r\n        </div>\r\n\r\n        {/* submit form */}\r\n        <form onSubmit={submitForm}>\r\n          <div className=\"form-group\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={deck.name}\r\n              onChange={changeForm}\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              placeholder={deck.name}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label>Description</label>\r\n\r\n            <textarea\r\n              name=\"description\"\r\n              value={deck.description}\r\n              onChange={changeForm}\r\n              className=\"form-control\"\r\n              id=\"description\"\r\n              placeholder={deck.description}\r\n              rows={4}\r\n            />\r\n          </div>\r\n\r\n          <Link\r\n            to={`/decks/${deckId}`}\r\n            name=\"cancel\"\r\n            className=\"btn btn-secondary mr-2\"\r\n          >\r\n            Cancel\r\n          </Link>\r\n\r\n          {/* submit button */}\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api/index.js\";\r\nimport { deleteDeck, deleteCard } from \"../utils/api/index.js\";\r\n\r\n// create a function that retrieves an updated deck's id,\r\n// fetches it's card data, and sets the deck's useState to\r\n// contain it's content\r\nfunction Deck({ updateDecks }) {\r\n  const [deck, setDeck] = useState([]);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const { url } = useRouteMatch();\r\n  const { id, name, description, cards } = deck;\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const deckInfo = async () => {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      setDeck(() => response);\r\n    };\r\n    deckInfo();\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  // create a handler for the delete button\r\n  const deleteHandler = async () => {\r\n    // if the button is clicked and confirmed by the user, delete the deck using it's id\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this deck? You will not be able to recover it.\"\r\n      )\r\n    ) {\r\n      await deleteDeck(id);\r\n      // use updateDecks() to subtract it from the card deck\r\n      updateDecks(-1);\r\n      // redirect to the home page\r\n      history.push(\"/\");\r\n      // if the delete is not confirmed, leave the deck as is and remain on the same page\r\n    } else {\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  // if there is no deck or no cards, return the following webpage\r\n  // that displays \"loading...\"\r\n  if (!deck || !cards) {\r\n    return (\r\n      <div className=\"spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n      // if a deck or cards are present, return a webpage with the following content\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <a href=\"/\">\r\n                <i className=\"bi bi-house-door-fill mr-1\"></i>\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"breadcrumb-item text-truncate\">{name}</li>\r\n          </ol>\r\n        </nav>\r\n\r\n        {/* a container holding the card deck, including their name,\r\n                description, a button to study it, a button to edit it, a \r\n                button to add cards to the deck, and a button to delete it */}\r\n\r\n        <div className=\"flex-container\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <h5 className=\"card-title ml-3\">{name}</h5>\r\n            </div>\r\n\r\n            {/* deck description */}\r\n            <p className=\"card-text\">{description}</p>\r\n\r\n            <div>\r\n              {/* edit button */}\r\n              <Link to={`/decks/${id}/edit`} className=\"btn btn-secondary mr-2\">\r\n                <i className=\"bi bi-pencil-square mr-2\"></i>\r\n                Edit\r\n              </Link>\r\n\r\n              {/* study button */}\r\n              <Link to={`/decks/${id}/study`} className=\"btn btn-primary mr-2\">\r\n                <i className=\"bi bi-journal-bookmark-fill mr-2\"></i>\r\n                Study\r\n              </Link>\r\n\r\n              {/* add cards button */}\r\n              <Link\r\n                to={`/decks/${id}/cards/new`}\r\n                className=\"btn btn-primary mr-2\"\r\n              >\r\n                <i className=\"bi bi-plus-circle mr-2\"></i>\r\n                Add Cards\r\n              </Link>\r\n\r\n              {/* delete button */}\r\n              <button\r\n                onClick={deleteHandler}\r\n                name=\"delete\"\r\n                value={id}\r\n                className=\"btn btn-danger\"\r\n              >\r\n                <i className=\"bi bi-trash-fill\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* a container containing all cards, including their front, back\r\n                an edit button, and a delete button */}\r\n\r\n        <div className=\"flex-container ml-2\">\r\n          <h1>Cards</h1>\r\n        </div>\r\n\r\n        {cards.length\r\n          ? cards.map((card, index) => (\r\n              <div className=\"row d-flex\" key={index}>\r\n                <div className=\"card col-sm-5 m-4\">\r\n                  <div className=\"row card-body\">\r\n                    {/* front */}\r\n                    <p className=\"text-muted\">front</p>\r\n                    <h4 className=\"col-10 card-text\">{card.front}</h4>\r\n                  </div>\r\n\r\n                  <div className=\"d-flex justify-content-end pl-4\">\r\n                    {/* edit button */}\r\n                    <Link\r\n                      to={`${url}/cards/${card.id}/edit`}\r\n                      className=\"btn btn-secondary mb-2\"\r\n                    >\r\n                      <i className=\"bi bi-pencil-square mr-2\"></i>\r\n                      Edit\r\n                    </Link>\r\n\r\n                    <button\r\n                      type=\"delete\"\r\n                      onClick={async () => {\r\n                        if (\r\n                          window.confirm(\r\n                            \"Are you sure you want to delete this card? You will not be able to recover it.\"\r\n                          )\r\n                        ) {\r\n                          await deleteCard(card.id);\r\n                          history.go(0);\r\n                        } else {\r\n                          history.go(0);\r\n                        }\r\n                      }}\r\n                      name=\"deleteCard\"\r\n                      value={card.id}\r\n                      className=\"btn btn-danger ml-2 mb-2\"\r\n                    >\r\n                      <i className=\"bi bi-trash-fill\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"card col-sm-5 m-4\">\r\n                  <div className=\"row card-body\">\r\n                    {/* back */}\r\n                    <p className=\"text-muted\">back</p>\r\n                    <h4 className=\"col-10 card-text\">{card.back}</h4>\r\n                  </div>\r\n\r\n                  <div className=\"d-flex justify-content-end pl-4\">\r\n                    {/* edit button */}\r\n                    <Link\r\n                      to={`${url}/cards/${card.id}/edit`}\r\n                      className=\"btn btn-secondary mr-2 mb-2\"\r\n                    >\r\n                      <i className=\"bi bi-pencil-square mr-2\"></i>\r\n                      Edit\r\n                    </Link>\r\n\r\n                    <button\r\n                      onClick={async () => {\r\n                        if (\r\n                          window.confirm(\r\n                            \"Are you sure you want to delete this card? You will not be able to recover it.\"\r\n                          )\r\n                        ) {\r\n                          await deleteCard(card.id);\r\n                          history.go(0);\r\n                        } else {\r\n                          history.go(0);\r\n                        }\r\n                      }}\r\n                      name=\"deleteCard\"\r\n                      value={card.id}\r\n                      className=\"btn btn-danger mr-2 mb-2\"\r\n                    >\r\n                      <i\r\n                        aria-hidden=\"true\"\r\n                        style={{ color: \"#ffffff\" }}\r\n                        className=\"fa fa-trash\"\r\n                      ></i>\r\n                      <i className=\"bi bi-trash-fill\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api/index.js\";\r\nimport Nav from \"./Components/Nav.js\";\r\n\r\nfunction CreateDeck({ updateDecks }) {\r\n  // make the original state of a new deck to contain an object\r\n  // with empty strings for the deck's name and description\r\n  const [newDeck, setNewDeck] = useState({ name: \"\", description: \"\" });\r\n\r\n  // create a variable to use the useHistory() hook\r\n  const history = useHistory();\r\n\r\n  // use changeForm to take the target deck and set it contain\r\n  // it's current content as well as it's updated name and description\r\n  const changeForm = ({ target }) => {\r\n    setNewDeck({ ...newDeck, [target.name]: target.value });\r\n  };\r\n\r\n  // use submitForm to create the new deck\r\n  const submitForm = async (event) => {\r\n    event.preventDefault();\r\n    const response = await createDeck(newDeck);\r\n    // push the deck into history using the useHistory() hook\r\n    history.push(`/decks/${response.id}`);\r\n    // update the card deck using updateDeck()\r\n    updateDecks(1);\r\n  };\r\n\r\n  // return a webpage containing the following content\r\n  return (\r\n    <div className=\"flex-container\">\r\n         <Nav name=\"New Deck\" page=\"Create Deck\" />\r\n      <div>\r\n        <h1>Create Deck</h1>\r\n      </div>\r\n   \r\n      {/* a form for the following content */}\r\n      <form onSubmit={submitForm}>\r\n        {/* a text input for the card deck's name */}\r\n        <div className=\"form-group\">\r\n          <label>Name</label>\r\n\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={newDeck.name}\r\n            onChange={changeForm}\r\n            id=\"name\"\r\n            className=\"form-control\"\r\n            placeholder=\"Deck Name\"\r\n          />\r\n        </div>\r\n\r\n        {/* a text area for the card's description */}\r\n        <div className=\"form-group\">\r\n          <label>Description</label>\r\n\r\n          <textarea\r\n            name=\"description\"\r\n            value={newDeck.description}\r\n            onChange={changeForm}\r\n            className=\"form-control\"\r\n            id=\"description\"\r\n            placeholder=\"Brief description of the deck.\"\r\n            rows={4}\r\n          />\r\n        </div>\r\n\r\n        {/* a button for cancelling the deck */}\r\n        <Link to={`/`} name=\"cancel\" className=\"btn btn-secondary mr-2\">\r\n          Cancel\r\n        </Link>\r\n\r\n        {/* a button for submitted the deck */}\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateDeck;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// create a function for the card form that takes in props\r\n// including the card, it's deck's id, the form's submit\r\n// component, and the form's change component\r\nfunction CardForm({ submitForm, changeForm, card, deckId, cardFront, cardBack, firstBtnText }) {\r\n  // using these props, display the following content on the page:\r\n  return (\r\n    <form\r\n      id=\"cardForm\"\r\n      onSubmit={submitForm}\r\n    >\r\n      <div className=\"flex-container\">\r\n        <div className=\"form-group\">\r\n          {/* a text area for the front of the card's content */}\r\n          <label>Front</label>\r\n          <textarea\r\n            name=\"front\"\r\n            value={card.front}\r\n            onChange={changeForm}\r\n            id=\"front\"\r\n            className=\"form-control\"\r\n            placeholder={cardFront}\r\n            rows={4}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          {/* a text area for the back of the card's content */}\r\n          <label>Back</label>\r\n          <textarea\r\n            name=\"back\"\r\n            value={card.back}\r\n            onChange={changeForm}\r\n            className=\"form-control\"\r\n            id=\"back\"\r\n            placeholder={cardBack}\r\n            rows={4}\r\n          />\r\n        </div>\r\n      </div>\r\n    \r\n    <div className=\"flex-container\">\r\n      <Link\r\n        to={`/decks/${deckId}`}\r\n        name=\"cancel\"\r\n        className=\"btn btn-secondary mr-2\"\r\n       \r\n      >\r\n        {firstBtnText}\r\n      </Link>\r\n\r\n      {/* a button for saving the card's content */}\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-primary\"\r\n      >\r\n        Save\r\n      </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CardForm;","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { updateCard, readDeck, readCard } from \"../utils/api/index.js\";\r\nimport CardForm from \"./Components/CardForm.js\";\r\nimport Nav from \"./Components/Nav.js\";\r\n\r\nfunction EditCard({ updateDecks }) {\r\n  const [deck, setDeck] = useState([]);\r\n  const [card, editCard] = useState({ front: \"\", back: \"\", deckId: \"\" });\r\n  const { deckId, cardId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const cardInfo = async () => {\r\n      const response = await readCard(cardId, abortController.signal);\r\n      editCard(() => response);\r\n    };\r\n    cardInfo();\r\n    return () => abortController.abort();\r\n  }, [cardId]);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    const deckInfo = async () => {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      setDeck(() => response);\r\n    };\r\n\r\n    deckInfo();\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const changeForm = ({ target }) => {\r\n    editCard({ ...card, [target.name]: target.value });\r\n  };\r\n\r\n  const submitForm = async (event) => {\r\n    event.preventDefault();\r\n    await updateCard(card);\r\n    history.push(`/decks/${deck.id}`);\r\n    updateDecks(1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* navigation bar */}\r\n      <Nav name={deck.name} page={card.id} />\r\n\r\n      <div className=\"flex-container\">\r\n        <h1>Edit Card</h1>\r\n      </div>\r\n      <CardForm\r\n        submitForm={submitForm}\r\n        changeForm={changeForm}\r\n        card={card}\r\n        deckId={deckId}\r\n        firstBtnText=\"Cancel\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../utils/api/index.js\";\r\nimport CardForm from \"./Components/CardForm.js\";\r\nimport Nav from \"./Components/Nav.js\";\r\n\r\nfunction AddCard() {\r\n  const [deck, setDeck] = useState([]);\r\n\r\n  // initial state of card before data is added through CardForm\r\n  const [card, addCard] = useState({ front: \"\", back: \"\", deckId: \"\" });\r\n\r\n  // variable for id of deck\r\n  const { deckId } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const deckInfo = async () => {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      setDeck(() => response);\r\n    };\r\n\r\n    deckInfo();\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const changeForm = ({ target }) => {\r\n    addCard({ ...card, [target.name]: target.value });\r\n  };\r\n\r\n  // handles adding data to card when submit button is clicked\r\n  const submitForm = (event) => {\r\n    event.preventDefault();\r\n    addCard({ ...card, deckId: deckId });\r\n    createCard(deckId, card);\r\n    addCard({ front: \"\", back: \"\", deckId: \"\" });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Nav name={deck.name} page=\"Add Card\" />\r\n\r\n      {/* before deck.name is fetched, displays \"loading...\" once title is fetched switches to \"deck.name: Add Card\"*/ }\r\n      <div>\r\n        <h1>{deck.name ? deck.name + \": Add Card\" : \"Loading title...\"}</h1>\r\n      </div>\r\n\r\n        {/* form with props for  */}\r\n      <CardForm\r\n        submitForm={submitForm}\r\n        changeForm={changeForm}\r\n        card={card}\r\n        deckId={deckId}\r\n        firstBtnText=\"Done\"\r\n        cardFront=\"Front side of card\"\r\n        cardBack=\"Back side of card\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCard;\r\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport { listDecks } from \"../utils/api\";\nimport Study from \"./Study\";\nimport EditDeck from \"./EditDeck\";\nimport Deck from \"./Deck\";\nimport CreateDeck from \"./CreateDeck\";\nimport EditCard from \"./EditCard\";\nimport AddCard from \"./AddCard\";\nimport NotFound from \"./NotFound\";\n\nfunction Layout() {\n  const [decks, setDecks] = useState([]);\n  const [deckLength, setDeckLength] = useState(0);\n  // update the decks by adding the total number of decks together\n  const updateDecks = (newDecks) => {\n    setDeckLength(() => deckLength + newDecks);\n  };\n  \n  useEffect(() => {\n    const ac = new AbortController();\n    async function fetchDecks() {\n      try {\n        const response = await listDecks(ac.signal);\n        setDecks(response);\n      } catch (err) {\n        if (err.type === \"AbortError\") {\n          console.error(\"Aborted\", err);\n        }\n      }\n    }\n    fetchDecks();\n    return () => ac.abort();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          {/* Home Page */}\n          <Route exact path=\"/\">\n            <Home decks={decks} />\n          </Route>\n          {/* Create Deck Page */}\n          <Route path=\"/decks/new\">\n            <CreateDeck updateDecks={updateDecks} />\n          </Route>\n          {/* Deck Page */}\n          <Route path=\"/decks/:deckId\" exact>\n            <Deck updateDecks={updateDecks} />\n          </Route>\n           {/* Study Page */}\n          <Route path=\"/decks/:deckId/study\">\n            <Study decks={decks} />\n          </Route>\n           {/* Add Card Page */}\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard updateDecks={updateDecks} />\n          </Route>\n           {/* Edit Deck Page */}\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck updateDecks={updateDecks} />\n          </Route>\n           {/* Edit Card Page */}\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard updateDecks={updateDecks} />\n          </Route>\n           {/* Not Found Page */}\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}